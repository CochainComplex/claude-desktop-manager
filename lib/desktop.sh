#!/bin/bash
# desktop.sh - Desktop integration utilities for Claude Desktop Manager

# IMPORTANT: Within sandbox environments, home path is always /home/claude
# When referring to paths inside the sandbox, always use /home/claude explicitly
# rather than using $HOME substitution for clarity and consistency

# Create a shell alias for an instance
create_alias() {
    local instance_name="$1"
    local alias_name="${2:-claude-${instance_name}}"
    
    # Check if instance exists
    if ! instance_exists "$instance_name"; then
        echo "Error: Instance '$instance_name' does not exist."
        return 1
    fi
    
    echo "Creating shell aliases for instance '$instance_name'..."
    
    # Get script directory and template file
    local script_path
    script_path="$(realpath "$0")"
    local template_file="${SCRIPT_DIR}/templates/bash_alias.template"
    
    # Check if template exists
    if [ ! -f "$template_file" ]; then
        echo "Warning: Alias template not found at ${template_file}, using minimal template."
        template_file=""
    fi
    
    # Create alias in user's .bash_aliases
    local alias_file="${ORIGINAL_HOME}/.bash_aliases"
    local system_alias_file="/etc/profile.d/claude-aliases.sh"
    local needs_system_install=false
    
    # Ask about system-wide aliases if not running as root
    if [ -d "/etc/profile.d" ] && ! is_running_as_root; then
        echo "Would you like to create a system-wide alias? (y/n)"
        echo "This will make the alias available to all users but requires sudo."
        read -r -p "> " response
        if [[ "$response" =~ ^[Yy] ]]; then
            needs_system_install=true
        fi
    fi
    
    # Create aliases content
    local alias_content=""
    
    if [ -f "$template_file" ]; then
        # Use the template file
        alias_content=$(cat "$template_file")
        
        # Replace template variables
        alias_content=$(echo "$alias_content" | sed "s|{alias_name}|$alias_name|g")
        alias_content=$(echo "$alias_content" | sed "s|{script_path}|$script_path|g")
        alias_content=$(echo "$alias_content" | sed "s|{instance}|$instance_name|g")
    else
        # Create minimal alias if template not found
        alias_content="alias $alias_name='$script_path start $instance_name'"
    fi
    
    if [ "$needs_system_install" = true ]; then
        # Create a temporary file
        local temp_file=$(mktemp)
        echo "# Claude Desktop aliases for ${instance_name}" > "$temp_file"
        echo "# Generated by Claude Desktop Manager" >> "$temp_file"
        echo "$alias_content" >> "$temp_file"
        
        # Use privilege management to install to system directory
        if copy_to_system_location "$temp_file" "$system_alias_file"; then
            # Make executable
            run_path_operation "Make system alias file executable" chmod +x "$system_alias_file"
            
            # Remove temporary file
            rm -f "$temp_file"
            
            echo "System-wide alias created at $system_alias_file"
            echo "It will be available after users log out and log back in."
        else
            echo "Failed to create system-wide alias"
            # Create a user-level alias as fallback
            needs_system_install=false
        fi
    fi
    
    # Create user-level alias if either specified or system install failed
    if [ "$needs_system_install" = false ]; then
        # Create .bash_aliases if it doesn't exist
        if [ ! -f "$alias_file" ]; then
            touch "$alias_file"
        fi
        
        # Check if alias already exists
        if grep -q "alias $alias_name=" "$alias_file"; then
            # Remove all existing aliases for this instance
            sed -i "/alias $alias_name/d" "$alias_file"
            echo "Removed existing aliases for '$alias_name'."
        fi
        
        # Append to .bash_aliases
        echo "# Claude Desktop alias for ${instance_name}" >> "$alias_file"
        echo "$alias_content" >> "$alias_file"
    fi
    
    echo "Aliases created. Run 'source ~/.bash_aliases' to enable them in the current shell."
    
    # Show the new aliases
    echo "Created aliases:"
    grep -n "$alias_name" "$alias_file" | sed 's/^/  /'
    
    return 0
}

# Create a desktop shortcut for an instance
create_desktop_shortcut() {
    local instance_name="$1"
    
    # Check if instance exists
    if ! instance_exists "$instance_name"; then
        echo "Error: Instance '$instance_name' does not exist."
        return 1
    fi
    
    echo "Creating desktop shortcut for instance '$instance_name'..."
    
    # Get script directory and path
    local script_path
    script_path="$(realpath "$0")"
    
    # Create desktop entry in user's local directory
    local desktop_dir="${ORIGINAL_HOME}/.local/share/applications"
    mkdir -p "$desktop_dir"
    
    local desktop_file="${desktop_dir}/claude-${instance_name}.desktop"
    
    # Check if there's a system-wide installation that we could use
    local system_desktop_dir="/usr/share/applications"
    local needs_system_install=false
    
    if [ -d "$system_desktop_dir" ] && ! is_running_as_root; then
        echo "Would you like to create a system-wide desktop shortcut? (y/n)"
        echo "This will make the shortcut available to all users but requires sudo."
        read -r -p "> " response
        if [[ "$response" =~ ^[Yy] ]]; then
            needs_system_install=true
            desktop_file="${system_desktop_dir}/claude-${instance_name}.desktop"
        fi
    fi
    
    # Get template directory
    local template_dir="$(find_template_dir)"
    if [ -z "$template_dir" ]; then
        echo "Warning: Templates directory not found, using fallback paths"
        template_dir="${SCRIPT_DIR}/templates"
        if [ ! -d "$template_dir" ]; then
            template_dir="$(cd "${SCRIPT_DIR}" && cd .. && pwd)/templates"
        fi
    fi
    
    # Try to use the desktop entry template
    local template_file="${template_dir}/desktop_entry.desktop"
    
    # Generate desktop entry content
    local desktop_content=""
    
    if [ -f "$template_file" ]; then
        echo "Using desktop entry template from: $template_file"
        # Read template content and substitute variables
        desktop_content=$(sed -e "s|{instance}|$instance_name|g" \
                             -e "s|{script_path}|$script_path|g" \
                             "$template_file")
    else
        echo "Warning: Desktop entry template not found at ${template_file}"
        echo "Creating desktop entry from inline content"
        # Fallback to inline generation
        desktop_content=$(cat <<EOF
[Desktop Entry]
Name=Claude ($instance_name)
Comment=Claude AI Assistant ($instance_name instance)
Exec=$script_path start $instance_name
Icon=claude-desktop
Type=Application
Terminal=false
Categories=Office;Utility;Network;
StartupWMClass=Claude-$instance_name
X-CMGR-Instance=$instance_name
EOF
)
    fi
    
    # Write to the appropriate location with or without privileges
    if [ "$needs_system_install" = true ]; then
        # Create a temporary file
        local temp_file=$(mktemp)
        echo "$desktop_content" > "$temp_file"
        
        # Use privilege management to install to system directory
        if copy_to_system_location "$temp_file" "$desktop_file"; then
            # Make executable
            run_path_operation "Make desktop entry executable" chmod +x "$desktop_file"
            
            # Remove temporary file
            rm -f "$temp_file"
            
            echo "System-wide desktop shortcut created at $desktop_file"
        else
            echo "Failed to create system-wide desktop shortcut"
            # Create a user-level shortcut as fallback
            desktop_file="${ORIGINAL_HOME}/.local/share/applications/claude-${instance_name}.desktop"
            echo "$desktop_content" > "$desktop_file"
            chmod +x "$desktop_file"
            echo "Created user-level desktop shortcut as fallback at $desktop_file"
        fi
    else
        # Write directly to user-level directory
        echo "$desktop_content" > "$desktop_file"
        chmod +x "$desktop_file"
        echo "Desktop shortcut created at $desktop_file"
    fi
    return 0
}
