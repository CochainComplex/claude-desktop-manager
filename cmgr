#!/bin/bash
# cmgr - Claude Desktop Manager
# Manages multiple isolated instances of Claude Desktop

set -euo pipefail

# Load libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/lib/dependencies.sh"
source "${SCRIPT_DIR}/lib/sandbox.sh"
source "${SCRIPT_DIR}/lib/installer.sh"
source "${SCRIPT_DIR}/lib/instance.sh"
source "${SCRIPT_DIR}/lib/config.sh"
source "${SCRIPT_DIR}/lib/desktop.sh"
source "${SCRIPT_DIR}/lib/help.sh"

# Check for basic dependencies
if ! check_dependencies; then
    echo "Required dependencies are missing. Please install them as indicated above."
    exit 1
fi

# Global variables - handle sudo properly
if [ "$(id -u)" -eq 0 ] && [ -n "${SUDO_USER:-}" ]; then
    # Running as root with sudo
    ORIGINAL_USER="${SUDO_USER}"
    ORIGINAL_HOME=$(eval echo ~${SUDO_USER})
    CMGR_HOME="${ORIGINAL_HOME}/.cmgr"
    SANDBOX_BASE="${ORIGINAL_HOME}/sandboxes"
    
    # Make sure we don't use root's home
    export HOME="${ORIGINAL_HOME}"
else
    # Running as regular user
    CMGR_HOME="${HOME}/.cmgr"
    SANDBOX_BASE="${HOME}/sandboxes"
fi

CMGR_CACHE="${CMGR_HOME}/cache"
CMGR_REGISTRY="${CMGR_HOME}/registry.json"

# Ensure basic directories exist
mkdir -p "${CMGR_HOME}" "${CMGR_CACHE}" "${SANDBOX_BASE}" "${CMGR_HOME}/logs"

# Initialize registry if it doesn't exist
if [ ! -f "${CMGR_REGISTRY}" ]; then
    echo '{"instances": {}}' > "${CMGR_REGISTRY}"
fi

# Fix ownership if running as root
if [ "$(id -u)" -eq 0 ] && [ -n "${SUDO_USER:-}" ]; then
    chown -R "${SUDO_USER}:$(id -gn "${SUDO_USER}")" "${CMGR_HOME}" "${SANDBOX_BASE}"
fi

# Command handlers
cmd_create() {
    local instance_name="$1"
    shift
    create_instance "$instance_name" "$@"
}

cmd_list() {
    list_instances
}

cmd_start() {
    local instance_name="$1"
    start_instance "$instance_name"
}

cmd_stop() {
    local instance_name="$1"
    stop_instance "$instance_name"
}

cmd_remove() {
    local instance_name="$1"
    remove_instance "$instance_name"
}

cmd_config() {
    local instance_name="$1"
    shift
    configure_instance "$instance_name" "$@"
}

cmd_alias() {
    local instance_name="$1"
    local alias_name="${2:-}"
    create_alias "$instance_name" "$alias_name"
}

cmd_desktop() {
    local instance_name="$1"
    create_desktop_shortcut "$instance_name"
}

cmd_mcp() {
    local instance_name="$1"
    shift
    configure_mcp "$instance_name" "$@"
}

cmd_execute() {
    local instance_name="$1"
    shift
    execute_claude_command "$instance_name" "$@"
}

cmd_fix_warnings() {
    local instance_name="$1"
    
    if [ -z "$instance_name" ]; then
        echo "Error: Missing instance name"
        cmd_help
        exit 1
    fi
    
    # Check if instance exists
    if ! instance_exists "$instance_name"; then
        echo "Error: Instance '$instance_name' does not exist."
        return 1
    fi
    
    echo "Applying MaxListenersExceededWarning fix to instance '$instance_name'..."
    
    # Copy the fix-listeners script if it doesn't exist
    local sandbox_home="${SANDBOX_BASE}/${instance_name}"
    mkdir -p "${sandbox_home}/.config/claude-desktop"
    if [ ! -f "${sandbox_home}/.config/claude-desktop/fix-listeners.js" ]; then
        cp -f "${SCRIPT_DIR}/templates/scripts/fix-listeners.js" "${sandbox_home}/.config/claude-desktop/"
    fi
    
    # Copy the enhanced preload script
    cp -f "${SCRIPT_DIR}/templates/scripts/preload.js" "${sandbox_home}/.config/claude-desktop/"
    mkdir -p "${sandbox_home}/.config/Claude/electron"
    cp -f "${SCRIPT_DIR}/templates/scripts/preload.js" "${sandbox_home}/.config/Claude/electron/"
    
    # Run the fix-listeners.js script
    run_in_sandbox "$instance_name" bash -c "
        echo 'Running fix-listeners.js script...'
        
        # First check if nodejs is installed
        if ! command -v node &>/dev/null; then
            echo 'Installing Node.js for patching...'
            mkdir -p ~/.local/share/nodejs
            curl -sL https://nodejs.org/dist/v18.16.0/node-v18.16.0-linux-x64.tar.gz | tar xz -C ~/.local/share/nodejs --strip-components=1
            export PATH=~/.local/share/nodejs/bin:\$PATH
        fi
        
        # For deb installations
        if [ -d ~/.local/share/claude-desktop ] || [ -x ~/.local/bin/claude-desktop ]; then
            APP_DIR=\$(readlink -f ~/.local/share/claude-desktop || echo ~/.local/bin)
            echo \"Patching \$APP_DIR...\"
            node ~/.config/claude-desktop/fix-listeners.js \$APP_DIR
        fi
        
        # For AppImage installations
        APPIMAGE=\$(find ~/Downloads -name '*.AppImage' | head -1)
        if [ -n \"\$APPIMAGE\" ] && [ ! -f \"\$APPIMAGE.original\" ]; then
            echo 'Creating wrapper script for AppImage...'
            mv \"\$APPIMAGE\" \"\$APPIMAGE.original\"
            cat > \"\$APPIMAGE\" << 'EOF'
#!/bin/bash
# Wrapper script to prevent MaxListenersExceededWarning
export NODE_OPTIONS='--no-warnings'
export ELECTRON_NO_WARNINGS=1

SCRIPT_DIR=\"\$(cd \"\$(dirname \"\${BASH_SOURCE[0]}\")\" && pwd)\"
\"\$SCRIPT_DIR/\$(basename \"\$0\").original\" \"\$@\"
EOF
            chmod +x \"\$APPIMAGE\"
            echo 'AppImage wrapper created successfully!'
        fi
        
        # Update the Claude config to use preload script
        mkdir -p ~/.config/Claude
        CONFIG_FILE=~/.config/Claude/claude_desktop_config.json
        
        if [ -f \"\$CONFIG_FILE\" ]; then
            # Use jq if available
            if command -v jq &>/dev/null; then
                TMP_FILE=\"\$CONFIG_FILE.tmp\"
                jq '.electronInitScript = \"$HOME/.config/Claude/electron/preload.js\"' \"\$CONFIG_FILE\" > \"\$TMP_FILE\"
                mv \"\$TMP_FILE\" \"\$CONFIG_FILE\"
            else
                # Simple sed-based approach if jq is not available
                sed -i 's/\"electronInitScript\":.*/\"electronInitScript\": \"$HOME\\/.config\\/Claude\\/electron\\/preload.js\",/g' \"\$CONFIG_FILE\"
                if ! grep -q \"electronInitScript\" \"\$CONFIG_FILE\"; then
                    # Add the configuration if not present
                    sed -i 's/{/{\"electronInitScript\": \"$HOME\\/.config\\/Claude\\/electron\\/preload.js\",/g' \"\$CONFIG_FILE\"
                fi
            fi
        else
            # Create new config file
            mkdir -p ~/.config/Claude
            echo '{
  \"electronInitScript\": \"$HOME/.config/Claude/electron/preload.js\"
}' > \"\$CONFIG_FILE\"
        fi
        
        echo 'MaxListenersExceededWarning fix completed!'
    "
    
    echo "âœ“ Fix applied successfully! Please restart the instance for changes to take effect."
    return 0
}

cmd_help() {
    show_help
}

# Main command dispatcher
main() {
    if [ $# -eq 0 ]; then
        cmd_help
        exit 0
    fi

    local command="$1"
    shift

    case "$command" in
        create)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_create "$@"
            ;;
        list)
            cmd_list
            ;;
        start)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_start "$@"
            ;;
        stop)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_stop "$@"
            ;;
        remove)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_remove "$@"
            ;;
        config)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_config "$@"
            ;;
        alias)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_alias "$@"
            ;;
        desktop)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_desktop "$@"
            ;;
        mcp)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_mcp "$@"
            ;;
        execute)
            if [ $# -lt 1 ]; then
                echo "Error: Missing instance name"
                cmd_help
                exit 1
            fi
            cmd_execute "$@"
            ;;
        fix-warnings)
            cmd_fix_warnings "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            echo "Error: Unknown command '$command'"
            cmd_help
            exit 1
            ;;
    esac
}

main "$@"